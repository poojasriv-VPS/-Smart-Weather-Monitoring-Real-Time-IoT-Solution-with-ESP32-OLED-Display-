#include <WiFi.h>
#include <HTTPClient.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ArduinoJson.h>

// WiFi Credentials
const char* ssid = "yourSSID";
const char* password = "yourPASSWORD";

// OpenWeatherMap API Details
const char* apiKey = "yourAPIKey";
const char* location = "yourLocation"; 
String apiUrl = "http://api.openweathermap.org/data/2.5/weather?q=" + String(location) + "&appid=" + String(apiKey) + "&units=metric";

// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Button Configuration
#define BUTTON_PIN 0  // GPIO for push button
int displayMode = 0;  // 0: Temperature, 1: Humidity, 2: Wind Speed
bool buttonPressed = false;

// Weather Data Variables
float temperature = 0.0;
int humidity = 0;
float windSpeed = 0.0;

void setup() {
    Serial.begin(115200);

    // Button Setup
    pinMode(BUTTON_PIN, INPUT_PULLUP);

    // OLED Setup
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 allocation failed!");
        while (1);
    }

    // Connect to WiFi
    connectToWiFi();

    // Fetch Initial Weather Data
    fetchWeatherData();
    displayWeatherData();
}

void loop() {
    handleButtonPress();

    // Fetch weather data every 10 minutes (600000 ms)
    static unsigned long lastUpdate = 0;
    if (millis() - lastUpdate > 600000) {
        fetchWeatherData();
        lastUpdate = millis();
        displayWeatherData();
    }
}

// Function to Connect to WiFi
void connectToWiFi() {
    Serial.print("Connecting to WiFi...");
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
    }

    Serial.println(" Connected!");
}

// Function to Fetch Weather Data from OpenWeatherMap API
void fetchWeatherData() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(apiUrl);

        int httpCode = http.GET();
        if (httpCode > 0) {
            String payload = http.getString();
            Serial.println(payload); // Debugging: Print raw JSON response

            StaticJsonDocument<1024> doc;
            DeserializationError error = deserializeJson(doc, payload);

            if (!error) {
                temperature = doc["main"]["temp"].as<float>();
                humidity = doc["main"]["humidity"].as<int>();
                windSpeed = doc["wind"]["speed"].as<float>();
            } else {
                Serial.print("JSON Parsing Failed: ");
                Serial.println(error.c_str());
            }
        } else {
            Serial.print("HTTP GET Failed: ");
            Serial.println(http.errorToString(httpCode));
        }

        http.end();
    } else {
        Serial.println("WiFi Not Connected");
    }
}

// Function to Handle Button Press
void handleButtonPress() {
    if (digitalRead(BUTTON_PIN) == LOW) {
        if (!buttonPressed) {
            displayMode = (displayMode + 1) % 3; // Cycle through display modes
            displayWeatherData();
            buttonPressed = true;
        }
    } else {
        buttonPressed = false;
    }
}

// Function to Display Weather Data on OLED
void displayWeatherData() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Weather Monitor");

    display.setTextSize(2);
    display.setCursor(0, 20);

    switch (displayMode) {
        case 0:
            display.print("Temp: ");
            display.print(temperature);
            display.println(" C");
            break;
        case 1:
            display.print("Hum: ");
            display.print(humidity);
            display.println(" %");
            break;
        case 2:
            display.print("Wind: ");
            display.print(windSpeed);
            display.println(" m/s");
            break;
    }

    display.display();
}
